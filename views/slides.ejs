<link rel="stylesheet" href="/assets/style.css" />
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<body onload="setupjs()">
<div class="container">
    <h3>Slide <%=flag %> </h3>
    <canvas id="canvas" width="820" height="550"></canvas></div>
    <div style="text-align: center;">
        <form name="loginBox" target="#here"  method="POST" action="/slides">
            <input name="txt" type="text" placeholder="Enter the text you want to insert and press enter" /><br />
            <input type="submit" />
        </form>


<br>
    <a href="/addslide" >Next Slide</a>
    <a><button onclick="savetxt()">Save presentation</button></a>
    <a><button onclick="dupslide()">Duplicate Slide</button></a>

        
        
        </div>

</div>
</body>


<script type="text/javascript">
        $(function() {
            $('form').each(function() {
                $(this).find('input').keypress(function(e) {
                    // Enter pressed?
                    if(e.which == 10 || e.which == 13) {
                        this.form.submit();
                    }
                });
                $(this).find('input[type=submit]').hide();
            });
        });
        
        savetxt=()=>{
            fetch("http://127.0.0.1:3020/savetxt", {
    method: "POST",
    headers: { "Content-Type": "application/json" }, // this line is important, if this content-type is not set it wont work
    body: JSON.stringify(texts),
  });

        }
        
        dupslide=()=>{
            fetch("http://127.0.0.1:3020/dupslide", {
    method: "POST",
    headers: { "Content-Type": "application/json" }, 
    body: JSON.stringify(texts),
  });

        }


      /*  $("#hhh").submit(function(e) {
e.preventDefault(); // avoid to execute the actual submit of the form.

var form = $(this);
var url = form.attr('action');

$.ajax({
       type: "POST",
       url: "/slides",
       data: form.serialize(), // serializes the form's elements.
       success: function(data)
       {
           alert(data); // show response from the php script.
       }
     });


});*/

var canvas = document.getElementById("canvas");
var ctx = canvas.getContext("2d");

// variables used to get mouse position on the canvas
var $canvas = $("#canvas");
var canvasOffset = $canvas.offset();
var offsetX = canvasOffset.left;
var offsetY = canvasOffset.top;
var scrollX = $canvas.scrollLeft();
var scrollY = $canvas.scrollTop();

// variables to save last mouse position
// used to see how far the user dragged the mouse
// and then move the text by that distance
var startX;
var startY;

// some text objects
var texts = [];

// some test texts
<%for(var i=0;i<slides[flag-1].x.length;i++){%>
    texts.push({
    text: "<%=slides[flag-1].txtbox[i]%>",
    x: <%=slides[flag-1].x[i]%>,
    y: <%=slides[flag-1].y[i]%>
});
<%}%>

// calculate width of each text for hit-testing purposes
ctx.font = "24px verdana";
for (var i = 0; i < texts.length; i++) {
    var text = texts[i];
    text.width = ctx.measureText(text.text).width;
    text.height = 24;
}

// this var will hold the index of the selected text
var selectedText = -1;

// START: draw all texts to the canvas
draw();

// clear the canvas draw all texts
function draw() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    for (var i = 0; i < texts.length; i++) {
        var text = texts[i];
        ctx.fillText(text.text, text.x, text.y);
    }
}

// test if x,y is inside the bounding box of texts[textIndex]
function textHittest(x, y, textIndex) {
    var text = texts[textIndex];
    return (x >= text.x && x <= text.x + text.width && y >= text.y - text.height && y <= text.y);
}

// handle mousedown events
// iterate through texts[] and see if the user
// mousedown'ed on one of them
// If yes, set the selectedText to the index of that text
function handleMouseDown(e) {
    e.preventDefault();
    startX = parseInt(e.clientX - offsetX);
    startY = parseInt(e.clientY - offsetY);

    // Put your mousedown stuff here
    for (var i = 0; i < texts.length; i++) {
        if (textHittest(startX, startY, i)) {
            selectedText = i;
        }
    }
}

// done dragging
function handleMouseUp(e) {
    e.preventDefault();
    selectedText = -1;
}

// also done dragging
function handleMouseOut(e) {
    e.preventDefault();
    selectedText = -1;
}

// handle mousemove events
// calc how far the mouse has been dragged since
// the last mousemove event and move the selected text
// by that distance
function handleMouseMove(e) {
    if (selectedText < 0) {
        return;
    }
    e.preventDefault();
    mouseX = parseInt(e.clientX - offsetX);
    mouseY = parseInt(e.clientY - offsetY);

    // Put your mousemove stuff here
    var dx = mouseX - startX;
    var dy = mouseY - startY;
    startX = mouseX;
    startY = mouseY;

    var text = texts[selectedText];
    text.x += dx;
    text.y += dy;
    draw();
}

// listen for mouse events
$("#canvas").mousedown(function (e) {
    handleMouseDown(e);
});
$("#canvas").mousemove(function (e) {
    handleMouseMove(e);
});
$("#canvas").mouseup(function (e) {
    handleMouseUp(e);
});
$("#canvas").mouseout(function (e) {
    handleMouseOut(e);
});
</script>